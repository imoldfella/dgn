
// const loadingMore = useSignal(false)
   

// const postsSignal = useSignal({
//     code: 200,
//     message: '',
// })


// {loadingMore.value ? (
//     <div class="mt-14">
//         <Spinner />
//     </div>
// ) : null}


    // useVisibleTask$(({ cleanup }) => {
    //   const nearBottom = async () => {
    //     if (
    //       window.innerHeight + window.scrollY >= document.body.offsetHeight - 500 &&
    //       !loadingMore.value
    //     ) {
    //       loadingMore.value = true

    //       const newPosts = await getMorePosts({ offset: posts.length })

    //       if (newPosts.code !== 200 || !newPosts.data) {
    //         loadingMore.value = false
    //         return
    //       }

    //       if (newPosts?.data?.length === 0) {
    //         window.removeEventListener('scroll', nearBottom)

    //         loadingMore.value = false
    //         return
    //       }

    //       posts.push(...newPosts.data)

    //       // small timeout to prevent multiple requests
    //       setTimeout(() => (loadingMore.value = false), 500)
    //     }
    //   }

    //   window.addEventListener('scroll', nearBottom)

    //   cleanup(() => window.removeEventListener('scroll', nearBottom))
    // })

    /*

*/



//  <div class='p-2 dark:text-white'>
//    <DatagroveHeader/>
//    {userPosts.map((post) => (
//           <PostItem key={post.id} post={post} />
//         ))}
//     </div> 

// eslint-disable-next-line @typescript-eslint/no-unused-vars



// Datagrove home. This will generally be like social media, get to standalone websites for shopping etc.


// export const GuestPage = component$(() => {
//     const ln = useLocale()

//     return <><div dir={ln.dir} class='px-2 space-x-1 my-2 fixed w-screen flex flex-row items-center'>
//         <div><Slot name='top-left' /></div>
//         <div class='flex-1 ' />
//         <Cart />
//     </div>
//         <div class="flex items-center justify-center w-screen h-screen">
//             <div class='w-96'>
//                 <Slot />
//             </div>
//         </div>
//     </>
// })

// interface QuerySummary {
// }

// type ShowFnProps<T> = {
//     before: QuerySummary,
//     end: QuerySummary,
//     //error: { message: string }
//     data: T[]
  
// }
// export interface Context {
//     min: number,
//     max: number
// }
// type ShowFn<T> = (data: T, x: number, y: number, context: Context ) => JSX.Element


// should this call a function for an entire list of components, or for each component? How should we handle bonus space.

// type QueryProps<T> = {
//     id: string
//     value: QueryReturn<T>
//     show: ShowFn<T>
//     //onRejected: (error: any) => JSXNode
// }

//export declare const Query: <T>(props: ResourceProps<T>) => JSXNode;

export declare const useQuery$: <T>(generatorFn: ResourceFn<T>, opts?: ResourceOptions) => QueryReturn<T>;


// why not an error boundary, e.g. providing toast?

// rows are a thing, because for most tables we need to be able to determine the height by formatting the entire row. 
export interface QueryRow<ROW> {
    id: string
    // this may not be the complete row as long as we can compute the height another way. shifting heights will cause ux issues.
    data: ROW
    y: number
    x: number
}

type ShowVq<T> = (data: T, y: number, context: Context ) => JSX.Element
// Only render the visible cells. rendertostring? store/signal for each cell?
// each row must have an X dimension.
// I don't want to use map? how can we not? qwik uses vdom.
export const Query2d = component$<{
    show: (data: any, x: number, y: number, context: Context ) => JSX.Element
}>((props) => {

    return <></>
})


// type TrackFn = ( fn: (()=>void))=>void

// type Qfnp<ROW> = {
//     track: TrackFn, 
//     query: QueryResult<ROW>
// }
// type Qfn2<ROW> = (fp: Qfnp<ROW>)=> void
// type ExecFn<P,R> = (query: QueryPlan<P,R>, props: P)=> void
// export interface QueryPlan<PROPS, ROW> {

// }
// anchor is stored in user database.
// select * from table   anchor key1='drug'
// select array_agg(lat) where lng between 1 and 2 and zoom=15
// each field can have json/cbor shape.
// we need width-in/height out to be able to scroll.


// type Qfn = (props: VProps<any>) => void
// export function useVisibleQuery$<PROPS, ROW>(fn: Qfn) : VisibleQueryResult<PROPS, ROW> {
//     const props = useStore<VProps<PROPS>>({
       
//     })
//     fn(props)

//     const r : VisibleQueryResult<PROPS, ROW> = {
//         props: props,
//         row: [],
//         start: 0,
//         length: 0
//     }
//     return useStore(r)
// }

// the query could have a column that represents x, or more commonly x may be associated with the attribute
// what about crosstabs? are these just adjustments to underlying sql?
// what about generation of the sql using sort, filter, etc.?
// what about moving/hiding columns? should this change the query?

export interface Database {

}



export interface QueryModel {
    
    params: any[]
    offset: number
    limit: number
}

export interface QueryReturn<T> {

}
export function useQuery2$<T> (...query: any[])  {
    return {} as QueryReturn<any>
}
export function scrollPosition(url: string) : number[]{
    return [0]
}
export function setScrollPosition(url: string, index: number[]) : void {

}
