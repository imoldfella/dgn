package dgcap

import (
	crand "crypto/rand"
	"encoding/binary"
	"math/big"
	"strings"

	"github.com/pion/randutil"
)

// GenerateCryptoRandomString generates a random string for cryptographic usage.
func GenerateCryptoRandomString(n int, runes string) (string, error) {
	letters := []rune(runes)
	b := make([]rune, n)
	for i := range b {
		v, err := crand.Int(crand.Reader, big.NewInt(int64(len(letters))))
		if err != nil {
			return "", err
		}
		b[i] = letters[v.Int64()]
	}
	return string(b), nil
}

// CryptoUint64 returns cryptographic random uint64.
func CryptoUint64() (uint64, error) {
	var v uint64
	if err := binary.Read(crand.Reader, binary.LittleEndian, &v); err != nil {
		return 0, err
	}
	return v, nil
}

func RandSeq(n int) string {
	val, err := randutil.GenerateCryptoRandomString(n, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")
	if err != nil {
		panic(err)
	}

	return val
}

type Identity struct {
	Name string
}

func (id *Identity) Host() string {
	v := strings.Split(id.Name, "@")
	return v[1]
}

type IdentityDatabase interface {
	Get(name string) (*Identity, error)
}

// browsers can only use 256; can we allow multiple keys like alg:key?
//	kp, e := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)

// this probably needs to take an identity database as well?
func NewIdentity(name string) (*Identity, error) {
	return &Identity{}, nil
}

type SimpleIdentityDatabase struct {
}

// Get implements IdentityDatabase.
func (*SimpleIdentityDatabase) Get(channel string) (*Identity, error) {
	return &Identity{}, nil
}
func NewSimpleIdentityDatabase() *SimpleIdentityDatabase {
	return &SimpleIdentityDatabase{}
}

var _ IdentityDatabase = (*SimpleIdentityDatabase)(nil)



// a serial number with revoke database allows us to work without a refresh token. We can do a simple database check on the expired token (look up by serial number) to see if we can refresh it or not.

func (c *CapDb) ProofToken(proof *Proof, proofTime int64) (string, error) {
	now := time.Now()
	exp := now.Add(24 * time.Hour)

	secret := c.CurrentSecret()

	// todo: check that the proof is valid
	// todo: check that the database is valid

	//c.store.AddDependsOn(secret.Serial, exp)

	jsonToken := paseto.JSONToken{
		Audience:   "test",
		Issuer:     "test_service",
		Jti:        "123",
		Subject:    "", // dbo.Db,
		IssuedAt:   now,
		Expiration: exp,
		NotBefore:  now,
	}

	// Add custom claim    to the token
	// jsonToken.Set("data", "this is a signed message")
	//footer := ""

	// Encrypt data
	// prefix := fmt.Sprintf("%d,", secret.Serial)
	// token, err := paseto.Encrypt(secret.Secret, jsonToken, footer)
	// if err != nil {
	// 	return "", err
	// }
	// token2, err := paseto.Encrypt(secret.Secret, refreshToken, footer2)
	// return prefix + token, prefix + token2, err
}

// func VerifyAuthHeader(auth string,) (int64, error) {
// 	var token paseto.JSONToken
// 	var footer string
// 	err := paseto.Decrypt(auth, secret, &token, &footer)
// 	if err != nil {
// 		return 0, err
// 	}
// 	dbid, e := strconv.Atoi(token.Subject)
// 	if e != nil {
// 		return 0, e
// 	}
// 	return int64(dbid), nil
// }
